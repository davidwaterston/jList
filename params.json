{"name":"jList","tagline":"ColdFusion-style list handling in Javascript.","body":"# **jList** \r\nv1.6.0\r\n\r\n##What does it do?\r\n*jList* is a collection of functions that bring *ColdFusion*-style list handling to Javascript.  \r\nA list is simply a string. What makes this string different (from any other string) is that it contains \"delimiters\". Delimiters (sometimes referred to as \"separators\") are used to separate each item in the list.    \r\nFor instance, the string \"carrots,peas,lettuce,tomato\" could be described as a \"comma delimited\" or \"comma separated\" list. Although commas are the most common delimiter for lists, any character can be used - \"Monkey:Rabbit:Mouse:Elephant\" is no less a list than the comma delimited list.\r\nOnce you start to use jList you will quickly realise that there are many situations where treating a string as a list is a simpler and more intuitive way to manipulate data than the built-in alternatives offered by Javascript. \r\n\t\r\n##What's included?\r\nThere are 12 files included with this package. The first, and most important, four are:   \r\n\r\n- **readme.md**  \r\nThis file.\r\n\r\n- **jlist-examples.htm**      \r\nExamples of each of the functions in action.\r\n\r\n- **jlist.js**    \r\nThe Javascript source code of the library.\r\n\r\n- **jlist-min.js**    \r\nThe Javascript source code minified using UglifyJS.  \r\n\r\nThe next seven files are part of a comprehensive *Jasmine* test suite that allows modifications to the library to be quickly and easily regression tested. They are:\r\n\r\n- **test.htm**  \r\nOpen this file in a browser to run the *Jasmine* test suite against the regular version of the library, jlist.js. This file can also be run in a browser here [https://rawgithub.com/davidwaterston/jList/master/test/test.htm](https://rawgithub.com/davidwaterston/jList/master/test/test.htm).\r\n\r\n- **test minimised version.htm**      \r\nOpen this file in a browser to run the *Jasmine* test suite against the minified version of the library, jlist-min.js. This file can also be run in a browser here [https://rawgithub.com/davidwaterston/jList/master/test/test%20minimised%20version.htm](https://rawgithub.com/davidwaterston/jList/master/test/test%20minimised%20version.htm).\r\n\r\n- **jlist-spec.js**  \r\nThe test suite specifications - these are the actual tests that are run by opening either of the preceding two files.\r\n\r\n- **jasmine-html.js**, **jasmine.css**, **jasmine,js** and **MIT.LICENSE**  \r\nThese are the files required by *Jasmine*. They were not written by me and are subject to a separate licence.\r\n\r\nFinally, there is:\r\n\r\n- **codekit-config.json**  \r\nA configuration file for the project for users of [CodeKit](http://incident57.com/codekit/) on the Mac. If you don't use CodeKit (and you're probably wasting a lot of development time if you don't) then you can safely ignore this file. Otherwise,  when adding the project to CodeKit it will pick up these settings automatically.\r\n  \r\n    \r\n\r\nFor this release there are 30 functions included. They are, in alphabetical order:\r\n\r\n- **[listAppend](#listAppend)**  \r\nConcatenates an element to a list.  \r\n- **[listChangeDelims](#listChangeDelims)**   \r\nChanges a list delimiter.\r\n- **[listConcatenate](#listConcatenate)**   \r\nAdds one list to the end of another.\r\n- **[listContains](#listContains)**  \r\nDetermines the index of the first list element that contains a specified substring.  \r\nThe search is case-sensitive.\r\n- **[listContainsNoCase](#listContainsNoCase)**  \r\nDetermines the index of the first list element that contains a specified substring. The search is not case-sensitive.\r\n- **[listDeleteAt](#listDeleteAt)**  \r\nDeletes an element from a list.  \r\n- **[listDifference](#listDifference)**  \r\nGets the elements that are unique to each of two different lists.  \r\n- **[listFind](#listFind)**  \r\nDetermines the index of the first list element in which a specified value occurs. The search is case-sensitive.  \r\n- **[listFindNoCase](#listFindNoCase)**  \r\nDetermines the index of the first list element in which a specified value occurs. The search is case-insensitive.\r\n- **[listFirst](#listFirst)**  \r\nGets the first element of a list.\r\n- **[listGetAt](#listGetAt)**  \r\nGets a list element at a specified position.\r\n- **[listInsertAt](#listInsertAt)**  \r\nInserts an element into a list.\r\n- **[listIntersection](#listIntersection)**  \r\nGets the elements that are common to two different lists.\r\n- **[listLast](#listLast)**  \r\nGets the last element of a list.\r\n- **[listLen](#listLen)**  \r\nDetermines the number of elements in a list.\r\n- **[listPrepend](#listPrepend)**  \r\nInserts an element at the beginning of a list.\r\n- **[listQualify](#listQualify)**  \r\nInserts a string at the beginning and end of list elements.\r\n- **[listRemove](#listRemove)**  \r\nRemoves elements in one list from another list. Matching is case-sensitive.\r\n- **[listRemoveNoCase](#listRemoveNoCase)**  \r\nRemoves elements in one list from another list. Matching is not case-sensitive.\r\n- **[listRemoveDuplicates](#listRemoveDuplicates)**  \r\nRemoves duplicate elements from a list. Matching is case-sensitive.\r\n- **[listRemoveDuplicatesNoCase](#listRemoveDuplicatesNoCase)**  \r\nRemoves duplicate elements from a list. Matching is not case-sensitive.\r\n- **[listReplace](#listReplace)**  \r\nReplaces instances of one element in a list with another element. Matching is case-sensitive.\r\n- **[listReplaceNoCase](#listReplaceNoCase)**  \r\nReplaces instances of one element in a list with another element. Matching is not case-sensitive.\r\n- **[listRest](#listRest)**  \r\nGets a list, without its first element.\r\n- **[listReverse](#listReverse)**  \r\nReverses the order of elements in a list.\r\n- **[listSetAt](#listSetAt)**  \r\nReplaces the contents of a list element.\r\n- **[listSort](#listSort)**  \r\nSorts list elements according to a sort type and sort order.\r\n- **[listUnion](#listUnion)**  \r\nCombines the elements from two different lists.\r\n- **[listValueCount](#listValueCount)**   \r\nCounts the instances of a specified value in a list. The search is case-sensitive.    \r\n- **[listValueCountNoCase](#listValueCountNoCase)**    \r\nCounts the instances of a specified value in a list. The search is not case-sensitive.   \r\n\r\nMore detailed documentation for each of these functions can be found later in this document.  \r\n    \r\n##Quick start\r\njList requires only that you include the *jlist.js* or *jlist-min.js* file in your source:\r\n\r\n\t<script src=\"jlist-min.js\"></script>\r\n\t\r\nAlternatively you may use a script loader such as LABjs or RequireJS or concatenate the file with one or more other Javascript files to improve loading times.\r\nIt's recommended that you use the minified version (*jlist-min.js*) in production to reduce the loading time. The original, commented, pre-minification source is also included and you may find this more useful when debugging, making your own changes or just for learning.  \r\nOnce the script is loaded then invoking the function you want is simply a matter of prefixing the function with \"jList.\". The following example, which uses the listAppend and listSort functions, shows how:\r\n\r\n\t<script src=\"jlist-min.js\"></script>\r\n\t<script>\r\n\t\tvar l, l2;\r\n   \t\tl = \"Susan,Janet,Steve,Bree,Michele,Jim,Mark,Elizabeth\";\r\n   \t\tl = jList.listAppend(l, \"David\");\r\n   \t\tl2 = jList.listSort(l);\r\n   \t\talert(l2);\r\n\t</script>\r\n\t\r\nThis will show an alert with the text \"Bree,David,Elizabeth,Janet,Jim,Mark,Michele,Steve,Susan\".\r\n\r\nList processing is convenient for handling many strings that don't at first appear to be lists.  \r\nFor example, the URL \"http://www.mysite.net/main.htm?id=1234\" can be considered to be a list or, more usefully, a series of lists. To extract the top-level domain (tld) part (in this case the \"net\") we could think of the URL as a \"dot delimited\" list, within a \"forward-slash delimited\" list.  \r\n\r\n\t1.\tvar url = \"http://www.mysite.net/main.htm?id=1234\";\r\n\t2.\tvar url_part = jList.listGetAt(url,3,\"/\");  // returns 'www.mysite.net'\r\n\t3.\tvar tld = jList.listLast(url_part,\".\");  // returns 'net' \r\n\r\nIn line 2 we grab the 3rd item in the list, using a delimiter of \"/\". In this case this is \"www.mysite.net\" because the first item is \"http:\" and the second item is empty. This is an important difference between this library and *ColdFusion* list processing - empty elements are not ignored in these functions. Notice also that we start counting the items from 1, not from zero.  \r\nOnce we have the third item stored in *url_part* (line 2) we can then treat this as a \"dot delimited\" list. Using the listLast function (line 3) to retrieve the rightmost item in the list but this time specifying \".\" as the delimiter will return \"net\" into the *tld* variable. \r\n\r\n##Browser compatibility\r\njList has been tested in the latest versions of:   \r\n\r\n- Chrome\r\n- Firefox\r\n- Safari\r\n- Opera\r\n- Internet Explorer\r\n\r\n\r\n##Licence\r\nCopyright (c) 2012 David Waterston.\r\n\r\nYou may use this library under the terms of the MIT License, detailed below.\r\nMore information can be found at [http://www.opensource.org/licenses/mit-license.php](http://www.opensource.org/licenses/mit-license.php).\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n##More\r\n- *jList* is minified using [UglifyJS](http://marijnhaverbeke.nl/uglifyjs).\r\n- Version numbers follow the [Semantic Versioning](http://semver.org) standard.\r\n- The unminified version of the source validates clean in [jsLint (Edition 2013-06-08)](http://jslint.com).\r\n- Written by [David Waterston] (http://dvolvr.davidwaterston.com)\r\n- Forked by [Chris Tsongas] (http://www.bitmojo.com)\r\n- Github repository: [http://davidwaterston.github.com/jList](http://davidwaterston.github.com/jList) and [https://github.com/tsongas/jList](https://github.com/tsongas/jList)\r\n- Planning and task management in [Trello](https://trello.com/board/jlist/504b80ff3a6c80626f306215)\r\n- Developed using [Sublime Text 2](http://www.sublimetext.com/2), [CodeBox](http://www.shpakovski.com/codebox) and [CodeKit](http://incident57.com/codekit/).\r\n- Tested using [Jasmine 1.2.0](http://pivotal.github.com/jasmine).\r\n- Documentation written in [Markdown](http://daringfireball.net/projects/markdown/) using [Byword](http://bywordapp.com/).\r\n- Pushed to [GitHub](http://davidwaterston.github.com/jlist) using [Tower](http://www.git-tower.com). \r\n- Made in Scotland and the United States of America.\r\n\r\n---\r\n\r\n#Usage details\r\n\r\n<a name=\"listAppend\"></a>\r\n##listAppend  \r\n\r\n**Description**  \r\nConcatenates an element to a list.  \r\n\r\n**Availability**  \r\nv1.0\r\n\r\n**Function syntax**  \r\nlistAppend(list, value [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the list, with *value* appended.  \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| value | An element to be appended to *list* |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**\r\n\r\nInserts a delimiter character before *value* regardless of whether *value* is empty.\r\nThe following table shows examples of *listAppend* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listAppend('elem1,elem2', 'rabbit' ) | 'elem1,elem2,rabbit' |\r\n| jList.listAppend('elem1,elem2','') | 'elem1,elem2,' |\r\n| jList.listAppend('','elem1,elem2') | 'elem1,elem2' |\r\n| jList.listAppend('cat-dog-mouse','hamster','-') | 'cat-dog-mouse-hamster' |\r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/KDNUf](http://jsfiddle.net/davidwaterston/KDNUf)\r\n\r\n---\r\n\r\n<a name=\"listChangeDelims\"></a>\r\n##listChangeDelims  \r\n\r\n**Description**  \r\nChanges a list delimiter.\r\n\r\n**Availability**    \r\nv1.3  \r\n\r\n**Function syntax**  \r\nlistChangeDelims(list, new_delimiter [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the list, with the *delimiter* character replaced by *new_delimiter*.  \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| new_delimiter | Delimiter string or a variable that contains one. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**  \r\n \r\nThe following table shows examples of *listChangeDelims* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listChangeDelims('a,e,c,b,d', '=') | 'a=e=c=b=d' |    \r\n| jList.listChangeDelims('a.e.c.b.d', ',', '.') | 'a,e,c,b,d' |      \r\n| jList.listChangeDelims('a,e,c,b,d','-','!') | 'a,e,c,b,d' |  \r\n| jList.listChangeDelims('a,e,c,b,d','-',',') | 'a-e-c-b-d' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/uvvHF](http://jsfiddle.net/davidwaterston/uvvHF)\r\n\r\n---\r\n\r\n<a name=\"listConcatenate\"></a>\r\n##listConcatenate  \r\n\r\n**Description**  \r\nAdds one list to the end of another.  \r\n\r\n**Availability**  \r\nv1.6\r\n\r\n**Function syntax**  \r\nlistConcatenate(list1, list2 [, delimiter ])\r\n\r\n**Returns**  \r\nA new list, with *list2* concatenated to *list1*.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list1 | A list or a variable that contains one. |   \r\n| list2 | A list or a variable that contains one. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**\r\n\r\nIf both *list1* and *list2* are not empty, inserts a delimiter character between *list1* and *list2*.  \r\nThe following table shows examples of *listConcatenate* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listConcatenate('elem1,elem2', 'rabbit,dog' ) | 'elem1,elem2,rabbit,dog' |\r\n| jList.listConcatenate('elem1,elem2','') | 'elem1,elem2' |\r\n| jList.listConcatenate('','elem1,elem2') | 'elem1,elem2' |\r\n| jList.listConcatenate('cat-dog-mouse','hamster','-') | 'cat-dog-mouse-hamster' |\r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/K2y92/](http://jsfiddle.net/davidwaterston/K2y92/)\r\n\r\n---\r\n\r\n<a name=\"listContains\"></a>\r\n##listContains  \r\n\r\n**Description**  \r\nDetermines the index of the first list element that contains a specified substring. The search is case-sensitive.\r\n\r\n**Availability**    \r\nv1.5.0  \r\n\r\n**Function syntax**  \r\nlistContains(list, substring [, delimiter ])\r\n\r\n**Returns**  \r\nIndex of the first list element that contains *substring*. If not found, returns zero.  \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| substring | A string or a variable that contains one. Item for which to search. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**  \r\n \r\nThe following table shows examples of *listContains* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listContains('cat,dog,mouse,rabbit,dog', 'og') | 2 |    \r\n| jList.listContains('cat.dog.mouse.rabbit.dog', 'og', '.') | 2 |      \r\n| jList.listContains('cat,dog,mouse,rabbit,dog', 'OG') | 0 |  \r\n| jList.listContains('cat.dog.mouse.rabbit.dog', 'Rab', '.') | 0 |  \r\n| jList.listContains('cat,dog,mouse,rabbit,dog', 'tr') | 0 |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/mjJ2n](http://jsfiddle.net/davidwaterston/mjJ2n)  \r\n  \r\n---\r\n\r\n<a name=\"listContainsNoCase\"></a>\r\n##listContainsNoCase  \r\n\r\n**Description**  \r\nDetermines the index of the first list element that contains a specified substring. The search is not case-sensitive.\r\n\r\n**Availability**    \r\nv1.5.0  \r\n\r\n**Function syntax**  \r\nlistContainsNoCase(list, substring [, delimiter ])\r\n\r\n**Returns**  \r\nIndex of the first list element that contains *substring*. If not found, returns zero.  \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| substring | A string or a variable that contains one. Item for which to search. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**  \r\n \r\nThe following table shows examples of *listContainsNoCase* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listContainsNoCase('cat,dog,mouse,rabbit,dog', 'og') | 2 |    \r\n| jList.listContainsNoCase('cat.dog.mouse.rabbit.dog', 'og', '.') | 2 |      \r\n| jList.listContainsNoCase('cat,dog,mouse,rabbit,dog', 'OG') | 2 |  \r\n| jList.listContainsNoCase('cat.dog.mouse.rabbit.dog', 'Rab', '.') | 4 |  \r\n| jList.listContains('cat,dog,mouse,rabbit,dog', 'tr') | 0 | \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/ku4rP](http://jsfiddle.net/davidwaterston/ku4rP)  \r\n\r\n---\r\n\r\n<a name=\"listDeleteAt\"></a>\r\n##listDeleteAt  \r\n\r\n**Description**  \r\nDeletes an element from a list.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistDeleteAt(list, position [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the list, without the specified element.  \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| position | A positive integer or a variable that contains one. Position at which to delete element. The first list position is 1. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listDeleteAt* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listDeleteAt('elem1,elem2,elem3',2) | 'elem1,elem3' |    \r\n| jList.listDeleteAt('elem1,elem2',4) | 'elem1,elem2' |      \r\n| jList.listDeleteAt('cat-dog-mouse',3,'-') | 'cat-dog' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/j6pEP](http://jsfiddle.net/davidwaterston/j6pEP)  \r\n\r\n---\r\n\r\n<a name=\"listDifference\"></a>\r\n##listDifference \r\n\r\n**Description**  \r\nGets the elements that are unique to each of two different lists.  \r\n\r\n**Availability**  \r\nv1.6\r\n\r\n**Function syntax**  \r\nlistDifference(list1, list2 [, delimiter ])\r\n\r\n**Returns**  \r\nA new list containing elements that are either in *list1* but not *list2*, or in *list2* but not *list1*.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list1 | A list or a variable that contains one. |   \r\n| list2 | A list or a variable that contains one. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listDifference* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listDifference('elem1,elem2', 'elem2,elem3' ) | 'elem1,elem3' |\r\n| jList.listDifference('','elem1,elem2') | 'elem1,elem2' |\r\n| jList.listDifference('elem1,elem2','') | 'elem1,elem2' |\r\n| jList.listDifference('cat-dog-mouse','cat-rabbit-dog-rabbit-hamster','-') | 'mouse-rabbit-hamster' |\r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/Zq6ay/](http://jsfiddle.net/davidwaterston/Zq6ay/)\r\n\r\n---\r\n\r\n<a name=\"listFind\"></a>\r\n##listFind  \r\n\r\n**Description**  \r\nDetermines the index of the first list element in which a specified value occurs. The search is case-sensitive.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistFind(list, value [, delimiter ])\r\n\r\n**Returns**  \r\nThe index of the first list element that contains *value*, with matching case. If not found, returns zero. The search is case-sensitive. \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| value | A string, a number, or a variable that contains one. Item for which to search. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listFind* processing:  \r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listFind('elem1,elem2,elem3','elem3') | 3 |  \r\n| jList.listFind('elem1,elem2,elem3','Elem3') | 0 |    \r\n| jList.listFind('elem1,elem2','cat') | 0 |      \r\n| jList.listFind('cat-dog--mouse','dog','-') | 2 |  \r\n| jList.listFind('5-4-3-2-1',4,'-') | 2 |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/LAfBn](http://jsfiddle.net/davidwaterston/LAfBn)\r\n\r\n---\r\n\r\n<a name=\"listFindNoCase\"></a>\r\n##listFindNoCase   \r\n\r\n**Description**  \r\nDetermines the index of the first list element in which a specified value occurs. The search is case-insensitive.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistFindNoCase(list, value [, delimiter ])\r\n\r\n**Returns**  \r\nThe index of the first list element that contains *value*, with matching case. If not found, returns zero. The search is case-insensitive. \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| value | A string, a number, or a variable that contains one. Item for which to search. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listFindNoCase* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listFindNoCase('elem1,elem2,elem3','elem3') | 3 |  \r\n| jList.listFindNoCase('elem1,elem2,elem3','Elem3') | 3 |    \r\n| jList.listFindNoCase('cat,dog','CAT') | 1 |      \r\n| jList.listFindNoCase('Cat-Dog--Mouse','dog','-') | 2 |  \r\n| jList.listFindNoCase('5-4-3-2-1',4,'-') | 2 |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/TXt2T](http://jsfiddle.net/davidwaterston/TXt2T)\r\n\r\n---\r\n\r\n<a name=\"listFirst\"></a>\r\n##listFirst   \r\n\r\n**Description**  \r\nGets the first element of a list.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistFirst(list, [, delimiter ])\r\n\r\n**Returns**  \r\nThe first element of a list. If the list is empty, returns an empty string.  \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| value | A string, a number, or a variable that contains one. Item for which to search. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listFirst* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listFirst('elem1,elem2,elem3') | 'elem1' |  \r\n| jList.listFirst('cat,dog','~') | 'cat,dog' |      \r\n| jList.listFirst('Cat-Dog--Mouse','-') | 'Cat' |  \r\n| jList.listFirst('5-4-3-2-1','-') | '5' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/FEQWc](http://jsfiddle.net/davidwaterston/FEQWc) \r\n\r\n---\r\n\r\n<a name=\"listGetAt\"></a>\r\n##listGetAt   \r\n\r\n**Description**  \r\nGets a list element at a specified position.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistGetAt(list, position, [, delimiter ])\r\n\r\n**Returns**  \r\nValue of the list element at position *position*. \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| position | A positive integer or a variable that contains one. Position at which to get element. The first list position is 1. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listGetAt* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listGetAt('elem1,elem2,elem3',1) | 'elem1' |  \r\n| jList.listGetAt('cat,dog',1,'~') | cat,dog |      \r\n| jList.listGetAt('Cat-Dog--Mouse',3,'-') | '' |  \r\n| jList.listGetAt('5-4-3-2-1',5,'-') | '1' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/7khW6](http://jsfiddle.net/davidwaterston/7khW6)  \r\n\r\n---\r\n\r\n<a name=\"listInsertAt\"></a>\r\n##listInsertAt    \r\n\r\n**Description**  \r\nInserts an element into a list.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistInsertAt(list, position, value, [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the *list*, with *value* inserted at the specified *position*.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| position | A positive integer or a variable that contains one. Position at which to insert *value*. The first list position is 1. |  \r\n| value | An element to be inserted |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listInsertAt* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listInsertAt('elem1,elem2,elem3',1,'hello') | 'hello,elem1,elem2,elem3' |   \r\n| jList.listInsertAt('cat,dog',1,'monkey','~') | 'monkey~cat,dog' |  \r\n| jList.listInsertAt('Cat-Dog--Mouse',3,'Elephant','-') | 'Cat-Dog-Elephant-Mouse' |    \r\n| jList.listInsertAt('5-4-3-2-1',5,'999','-') | '5-4-3-2-999-1' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/9D26p](http://jsfiddle.net/davidwaterston/9D26p)  \r\n\r\n---\r\n\r\n<a name=\"listIntersection\"></a>\r\n##listIntersection  \r\n\r\n**Description**  \r\nGets the elements that are common to each of two different lists.  \r\n\r\n**Availability**  \r\nv1.6\r\n\r\n**Function syntax**  \r\nlistIntersection(list1, list2 [, delimiter ])\r\n\r\n**Returns**  \r\nA new list only containing elements that are in both *list1* and *list2*.\r\n\r\n**Parameters**\r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list1 | A list or a variable that contains one. |   \r\n| list2 | A list or a variable that contains one. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listIntersection* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listIntersection('elem1,elem2', 'elem2,elem3' ) | 'elem2' |\r\n| jList.listIntersection('','elem1,elem2') | '' |\r\n| jList.listIntersection('elem1,elem2','') | '' |\r\n| jList.listIntersection('cat-dog-mouse','cat-rabbit-dog-rabbit-hamster','-') | 'cat-dog' |\r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/zX8aU/](http://jsfiddle.net/davidwaterston/zX8aU/)\r\n\r\n---\r\n\r\n<a name=\"listLast\"></a>\r\n##listLast   \r\n\r\n**Description**  \r\nGets the last element of a list.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistLast(list [, delimiter ])\r\n\r\n**Returns**  \r\nThe last element of the *list*.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listLast* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listLast('elem1,elem2,elem3') | 'elem3' |   \r\n| jList.listLast('cat,dog','~') | 'cat,dog' |  \r\n| jList.listLast('Cat-Dog--Mouse','-') | 'Mouse' |     \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/BbLD8](http://jsfiddle.net/davidwaterston/BbLD8)  \r\n\r\n---\r\n\r\n<a name=\"listLen\"></a>\r\n##listLen   \r\n\r\n**Description**  \r\nDetermines the number of elements in a list.  \r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistLen(list [, delimiter ])\r\n\r\n**Returns**  \r\nThe number of elements in a list as an integer.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listLen* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listLen('elem1,elem2,elem3') | 3 |   \r\n| jList.listLen('cat,dog','~') | 1 |  \r\n| jList.listLen('Cat-Dog--Mouse','-') | 4 |     \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/Uz4P2](http://jsfiddle.net/davidwaterston/Uz4P2) \r\n\r\n---\r\n\r\n<a name=\"listPrepend\"></a>\r\n##listPrepend   \r\n\r\n**Description**  \r\nInserts an element at the beginning of a list.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistPrepend(list, value [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the *list*, with *value* inserted at the first position.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| value | An element to be inserted at the beginning of *list*. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listPrepend* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listPrepend('elem1,elem2,elem3','elem99') | 'elem99,elem1,elem2,elem3' |   \r\n| jList.listPrepend('cat,dog','mouse','~') | 'mouse~cat,dog' |  \r\n| jList.listPrepend('Cat-Dog--Mouse','Rabbit','-') | 'Rabbit-Cat-Dog--Mouse' |   \r\n| jList.listPrepend('','Rabbit','-') | 'Rabbit' |       \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/n8AXz](http://jsfiddle.net/davidwaterston/n8AXz)  \r\n\r\n---\r\n\r\n<a name=\"listQualify\"></a>\r\n##listQualify   \r\n\r\n**Description**  \r\nInserts a string at the beginning and end of all list elements.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistQualify(list, qualifier [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the *list*, with *qualifier* before and after each element.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| qualifier | A string or a variable that contains one. Character or string to insert before and after the *list* elements. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listQualify* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listQualify('elem1,elem2,elem3','~') | '~elem1~,~elem2~,~elem3~' |   \r\n| jList.listQualify('cat,dog','@','~') | '@cat,dog@' |  \r\n| jList.listQualify('Cat-Dog--Mouse','$','-') | '$Cat$-$Dog$-$$-$Mouse$' |   \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/ArLh9](http://jsfiddle.net/davidwaterston/ArLh9)  \r\n\r\n---\r\n\r\n<a name=\"listRemove\"></a>\r\n##listRemove  \r\n\r\n**Description**\r\nRemoves elements in one list from another list. Matching is case-sensitive.\r\n\r\n**Availability**\r\nv1.6\r\n\r\n**Function syntax**\r\nlistRemove(list1, list2 [, delimiter ])\r\n\r\n**Returns**\r\nA new list, with the elements in *list2* removed from *list1*.\r\n\r\n**Parameters**\r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list1 | A list or a variable that contains one. |   \r\n| list2 | A list or a variable that contains one. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listRemove* processing: \r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listRemove('elem1,elem2,elem3','elem2') | 'elem1,elem3' |    \r\n| jList.listRemove('elem1,elem2','elem2,elem3') | 'elem1' |\r\n| jList.listRemove('cat-dog-mouse','mouse-dog-cat','-') | '' | \r\n| jList.listRemove('cat-dog-Mouse','mouse-dog-cat','-') | 'Mouse' | \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/WeZtB/](http://jsfiddle.net/davidwaterston/WeZtB/)  \r\n\r\n---\r\n\r\n<a name=\"listRemoveNoCase\"></a>\r\n##listRemoveNoCase  \r\n\r\n**Description**\r\nRemoves elements in one list from another list. Matching is not case-sensitive.\r\n\r\n**Availability**\r\nv1.6\r\n\r\n**Function syntax**\r\nlistRemoveNoCase(list1, list2 [, delimiter ])\r\n\r\n**Returns**\r\nA new list, with the elements in *list2* removed from *list1*.\r\n\r\n**Parameters**\r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list1 | A list or a variable that contains one. |   \r\n| list2 | A list or a variable that contains one. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listRemoveNoCase* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listRemoveNoCase('elem1,elem2,elem3','elem2') | 'elem1,elem3' |    \r\n| jList.listRemoveNoCase('elem1,elem2','elem2,elem3') | 'elem1' |\r\n| jList.listRemoveNoCase('cat-dog-mouse','mouse-dog-cat','-') | '' | \r\n| jList.listRemoveNoCase('cat-dog-Mouse','mouse-dog-cat','-') | '' | \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/BYXnk/](http://jsfiddle.net/davidwaterston/BYXnk/)  \r\n\r\n---\r\n\r\n<a name=\"listRemoveDuplicates\"></a>\r\n##listRemoveDuplicates   \r\n\r\n**Description**  \r\nRemoves all duplicate elements from a list. Where an element matches one which appears earlier in the list it is removed. Matching is case-sensitive.\r\n\r\n**Availability**  \r\nv1.1  \r\n\r\n**Function syntax**  \r\nlistRemoveDuplicates(list, [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the *list*, with duplicate elements removed.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |    \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listRemoveDuplicates* processing:  \r\n\r\n| Statement | Output |    \r\n| :-- | :-- |   \r\n| jList.listRemoveDuplicates('a,e,c,e,a,b,d') | 'a,e,c,b,d' |   \r\n| jList.listRemoveDuplicates('a,f,c,d,A,f,C,d') | 'a,f,c,d,A,C' |   \r\n| jList.listRemoveDuplicates('a~12~1~Z~C~A~A~a~12','~') | 'a~12~1~Z~C' |  \r\n| jList.listRemoveDuplicates('1.1.1.1.1.1','.') | '1' |   \r\n| jList.listRemoveDuplicates('12,3,4,1,12,4,6') | '12,3,4,1,6' |   \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/qHvHg](http://jsfiddle.net/davidwaterston/qHvHg) \r\n\r\n---\r\n\r\n<a name=\"listRemoveDuplicatesNoCase\"></a>\r\n##listRemoveDuplicatesNoCase   \r\n\r\n**Description**  \r\nRemoves all duplicate elements from a list. Where an element matches one which appears earlier in the list it is removed. Matching is not case-sensitive.\r\n\r\n**Availability**  \r\nv1.1  \r\n\r\n**Function syntax**  \r\nlistRemoveDuplicatesNoCase(list, [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of the *list*, with duplicate elements removed.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |    \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listRemoveDuplicatesNoCase* processing:  \r\n\r\n| Statement | Output |    \r\n| :-- | :-- |   \r\n| jList.listRemoveDuplicatesNoCase('a,e,c,e,a,b,d') | 'a,e,c,b,d' |   \r\n| jList.listRemoveDuplicatesNoCase('a,f,c,d,A,f,C,d') | 'a,f,c,d' |   \r\n| jList.listRemoveDuplicatesNoCase('a~12~1~Z~C','~') | 'a~12~1~Z~C' |  \r\n| jList.listRemoveDuplicatesNoCase('1.1.1.1.1.1','.') | '1' |   \r\n| jList.listRemoveDuplicatesNoCase('12,3,4,1,12,4,6') | '12,3,4,1,6' |   \r\n| jList.listRemoveDuplicatesNoCase('cat,dog,rabbit,DOG,Rabbit') | 'cat,dog,rabbit' |   \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/8NpEY](http://jsfiddle.net/davidwaterston/8NpEY)\r\n\r\n---\r\n\r\n<a name=\"listReplace\"></a>\r\n##listReplace  \r\n\r\n**Description**\r\nReplaces any occurances of an element in a list with a different element. Matching is case-sensitive.\r\n\r\n**Availability**\r\nv1.6\r\n\r\n**Function syntax**\r\nlistReplace(list, value1, value2 [, delimiter ])\r\n\r\n**Returns**\r\nA new list, with any occurrances of *value1* replaced by *value2*.\r\n\r\n**Parameters**\r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| value1 | Element in *list* to be replaced. |  \r\n| value2 | Element to replace *value1*. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listReplace* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listReplace('elem1,elem2,elem3','elem2','elem4') | 'elem1,elem4,elem3' |    \r\n| jList.listReplace('elem1','elem1','elem2') | 'elem2' |\r\n| jList.listReplace('cat-dog-mouse','mouse','flea','-') | 'cat-dog-flea' | \r\n| jList.listReplace('cat-dog-mouse','Mouse','flea','-') | 'cat-dog-mouse' | \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/5TdcQ/](http://jsfiddle.net/davidwaterston/5TdcQ/)  \r\n\r\n---\r\n\r\n<a name=\"listReplaceNoCase\"></a>\r\n##listReplaceNoCase\r\n\r\n**Description**\r\nReplaces any occurances of an element in a list with a different element. Matching is not case-sensitive.\r\n\r\n**Availability**\r\nv1.6\r\n\r\n**Function syntax**\r\nlistReplaceNoCase(list, value1, value2 [, delimiter ])\r\n\r\n**Returns**\r\nA new list, with any occurrances of *value1* replaced by *value2*.\r\n\r\n**Parameters**\r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |   \r\n| value1 | Element in *list* to be replaced. |  \r\n| value2 | Element to replace *value1*. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listReplaceNoCase* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listReplaceNoCase('elem1,elem2,elem3','elem2','elem4') | 'elem1,elem4,elem3' |    \r\n| jList.listReplaceNoCase('elem1','elem1','elem2') | 'elem2' |\r\n| jList.listReplaceNoCase('cat-dog-mouse','mouse','flea','-') | 'cat-dog-flea' | \r\n| jList.listReplaceNoCase('cat-dog-mouse','Mouse','flea','-') | 'cat-dog-flea' | \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/nbmmu/](http://jsfiddle.net/davidwaterston/nbmmu/)  \r\n\r\n---\r\n\r\n<a name=\"listRest\"></a>\r\n##listRest   \r\n\r\n**Description**  \r\nGets a list, without its first element.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistRest(list [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of *list*, without the first element. If *list* has one element, returns an empty list.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listRest* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listRest('elem1,elem2,elem3') |'elem2,elem3' |   \r\n| jList.listRest('cat,dog','~') | '' |  \r\n| jList.listRest('Cat-Dog--Mouse','-') | 'Dog--Mouse' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/Q6Hh4](http://jsfiddle.net/davidwaterston/Q6Hh4)  \r\n\r\n---\r\n\r\n<a name=\"listReverse\"></a>\r\n##listReverse   \r\n\r\n**Description**  \r\nReverses the order of elements in a list.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistReverse(list [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of *list*, with the order of the elements reversed.  \r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listReverse* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listReverse('elem1,elem2,elem3') |'elem3,elem2,elem1' |   \r\n| jList.listReverse('cat,dog','~') | 'cat,dog' |  \r\n| jList.listReverse('Cat-Dog--Mouse','-') | 'Mouse--Dog-Cat' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/vsmXu](http://jsfiddle.net/davidwaterston/vsmXu)  \r\n\r\n---\r\n\r\n<a name=\"listSetAt\"></a>\r\n##listSetAt   \r\n\r\n**Description**  \r\nReplaces the contents of a list element.\r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nlistSetAt(list, position, value [, delimiter ])\r\n\r\n**Returns**  \r\nA copy of *list*, with a new *value* assigned to the element at a specified *position*.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| position | A positive integer or a variable that contains one. Position at which to set a value. The first list position is 1. |  \r\n| value | An element to be injected into *list*. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listSetAt* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listSetAt('elem1,elem2,elem3',1,'elem99') | 'elem99,elem1,elem2,elem3' |   \r\n| jList.listSetAt('cat,dog',2,'hamster','~') | 'cat,dog,hamster' |  \r\n| jList.listSetAt('Cat-Dog--Mouse',3,'Hamster','-') | 'Cat-Dog-Hamster-Mouse' |  \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/CTN2w](http://jsfiddle.net/davidwaterston/CTN2w) \r\n\r\n---\r\n\r\n<a name=\"listSort\"></a>\r\n##listSort   \r\n\r\n**Description**  \r\nSorts list elements according to a sort type and sort order.  \r\n\r\n**Availability**  \r\nv1.0  \r\n\r\n**Function syntax**  \r\nListSort(list, sort_type [, sort_order, delimiter ])\r\n\r\n**Returns**  \r\nA copy of a *list*, sorted.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| sort_type | numeric: sorts numbers |  \r\n| &nbsp; | alpha:   sorts text alphabetically. Case sensistive. |\r\n| sort_order | asc - ascending sort order. This is the default. |  \r\n| &nbsp; | desc - descending sort order. |  \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listSort* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listSort('a,e,c,b,d') | 'a,b,c,d,e' |   \r\n| jList.listSort('a,f,c,d,A,C') | 'A,C,a,c,d,f' |  \r\n| jList.listSort('a~12~1~Z~C','alpha','asc','~') | 'a~Z~C~12~1' |    \r\n| jList.listSort('12,3,4,1,55,5,6','alpha','asc') | '1,12,3,4,5,55,6' |   \r\n| jList.listSort('12,3,4,1,55,5,6','numeric','asc') | '1,3,4,5,6,12,55' |   \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/ff2zy](http://jsfiddle.net/davidwaterston/ff2zy)\r\n\r\n---\r\n\r\n<a name=\"listUnion\"></a>\r\n##listUnion  \r\n\r\n**Description**  \r\nCombines the elements from two different lists.  \r\n\r\n**Availability**  \r\nv1.6\r\n\r\n**Function syntax**  \r\nlistUnion(list1, list2 [, delimiter ])\r\n\r\n**Returns**  \r\nA new list with duplicates removed containing all elements from both *list1* and *list2*.\r\n\r\n**Parameters**\r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list1 | A list or a variable that contains one. |   \r\n| list2 | A list or a variable that contains one. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |  \r\n\r\n**Usage**\r\n\r\nThe following table shows examples of *listUnion* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listUnion('elem1,elem2', 'elem2,elem3' ) | 'elem1,elem2,elem3' |\r\n| jList.listUnion('','elem1,elem2') | 'elem1,elem2' |\r\n| jList.listUnion('elem1,elem2','') | 'elem1,elem2' |\r\n| jList.listUnion('cat-dog-mouse','cat-rabbit','-') | 'cat-dog-mouse-rabbit' |\r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/gUGGw/](http://jsfiddle.net/davidwaterston/gUGGw/)\r\n\r\n---\r\n\r\n<a name=\"listValueCount\"></a>\r\n##listValueCount   \r\n\r\n**Description**  \r\nCounts instances of a specified value in a list. The search is case-sensitive.    \r\n\r\n**Availability**  \r\nv1.3  \r\n\r\n**Function syntax**  \r\nlistValueCount(list, value [, delimiter ])  \r\n\r\n**Returns**  \r\nThe number of instances of *value* in the list.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| value | Item for which to search. Can be a string or number, or a variable that contains one. The search is case-sensitive. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listValueCount* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listValueCount('a,e,a,c,a,b,a,d', 'a') | 4 |   \r\n| jList.listValueCount('a,e,a,c,a,b,a,d', 'A') | 0 |   \r\n| jList.listValueCount('a,e,A,c,a,b,A,d', 'A') | 2 |   \r\n| jList.listValueCount('a;e;A;c;a;b;A;d', 'A') | 0 |   \r\n| jList.listValueCount('a;e;A;c;a;b;A;d', 'A', ';') | 2 |   \r\n| jList.listValueCount('John,Mark,Steve,Alan,John,john', 'john') | 1 |   \r\n| jList.listValueCount('1,2,3,1,2,3', 3) | 2 |   \r\n| jList.listValueCount('1,2,3,1,2,3', '3') | 2 |    \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/WPyED](http://jsfiddle.net/davidwaterston/WPyED)  \r\n\r\n---\r\n\r\n<a name=\"listValueCountNoCase\"></a>\r\n##listValueCountNoCase   \r\n\r\n**Description**  \r\nCounts instances of a specified value in a list. The search is not case-sensitive.    \r\n\r\n**Availability**  \r\nv1.3  \r\n\r\n**Function syntax**  \r\nlistValueCountNoCase(list, value [, delimiter ])  \r\n\r\n**Returns**  \r\nThe number of instances of *value* in the list.\r\n\r\n**Parameters**   \r\n\r\n| Parameter | Description |  \r\n| :--------- | :---------- |  \r\n| list | A list or a variable that contains one. |  \r\n| value | Item for which to search. Can be a string or number, or a variable that contains one. The search is not case-sensitive. |   \r\n| delimiter | A string or a variable that contains one. The character that separates list elements. The default value is comma. |   \r\n\r\n**Usage**\r\n \r\nThe following table shows examples of *listValueCountNoCase* processing:\r\n\r\n| Statement | Output |  \r\n| :-- | :-- |\r\n| jList.listValueCountNoCase('a,e,a,c,a,b,a,d', 'a') | 4 |   \r\n| jList.listValueCountNoCase('a,e,a,c,a,b,a,d', 'A') | 4 |   \r\n| jList.listValueCountNoCase('a,e,A,c,a,b,A,d', 'A') | 4 |   \r\n| jList.listValueCountNoCase('a;e;A;c;a;b;A;d', 'A') | 0 |   \r\n| jList.listValueCountNoCase('a;e;A;c;a;b;A;d', 'A', ';') | 4 |   \r\n| jList.listValueCountNoCase('John,Mark,Steve,Alan,John,john', 'john') | 3 |   \r\n| jList.listValueCountNoCase('1,2,3,1,2,3', 3) | 2 |   \r\n| jList.listValueCountNoCase('1,2,3,1,2,3', '3') | 2 |    \r\n\r\n**jsFiddle**\r\n\r\n[http://jsfiddle.net/davidwaterston/4gVnX](http://jsfiddle.net/davidwaterston/4gVnX)\r\n\r\n---\r\n\r\n\r\n#jsFiddle\r\nIn addition to the examples included in the file *jlist-test.htm*, all functions are available in *jsFiddle* for ad-hoc testing:  \r\n  \r\n[List of *fiddles* by Chris Tsongas](https://gist.github.com/tsongas/5744476)  \r\n[List of *fiddles* by David Waterston](http://jsfiddle.net/user/davidwaterston/fiddles)  \r\n\r\n[listAppend](http://jsfiddle.net/davidwaterston/KDNUf)  \r\n[listChangeDelims](http://jsfiddle.net/davidwaterston/uvvHF)  \r\n[listConcatenate](http://jsfiddle.net/davidwaterston/K2y92/)  \r\n[listContains](http://jsfiddle.net/davidwaterston/mjJ2n)  \r\n[listContainsNoCase](http://jsfiddle.net/davidwaterston/ku4rP)  \r\n[listDeleteAt](http://jsfiddle.net/davidwaterston/j6pEP)  \r\n[listDifference](http://jsfiddle.net/davidwaterston/Zq6ay/)  \r\n[listFind](http://jsfiddle.net/davidwaterston/LAfBn)  \r\n[listFindNoCase](http://jsfiddle.net/davidwaterston/TXt2T)  \r\n[listFirst](http://jsfiddle.net/davidwaterston/FEQWc)  \r\n[listGetAt](http://jsfiddle.net/davidwaterston/7khW6)  \r\n[listInsertAt](http://jsfiddle.net/davidwaterston/9D26p)  \r\n[listIntersection](http://jsfiddle.net/davidwaterston/zX8aU/)  \r\n[listLast](http://jsfiddle.net/davidwaterston/BbLD8)  \r\n[listLen](http://jsfiddle.net/davidwaterston/Uz4P2)  \r\n[listPrepend](http://jsfiddle.net/davidwaterston/n8AXz)  \r\n[listQualify](http://jsfiddle.net/davidwaterston/ArLh9)  \r\n[listRemove](http://jsfiddle.net/davidwaterston/WeZtB/)  \r\n[listRemoveNoCase](http://jsfiddle.net/davidwaterston/BYXnk/)  \r\n[listRemoveDuplicates](http://jsfiddle.net/davidwaterston/qHvHg)  \r\n[listRemoveDuplicatesNoCase](http://jsfiddle.net/davidwaterston/8NpEY)  \r\n[listReplace](http://jsfiddle.net/davidwaterston/5TdcQ/)  \r\n[listReplaceNoCase](http://jsfiddle.net/davidwaterston/nbmmu/)  \r\n[listRest](http://jsfiddle.net/davidwaterston/Q6Hh4)  \r\n[listReverse](http://jsfiddle.net/davidwaterston/vsmXu)  \r\n[listSetAt](http://jsfiddle.net/davidwaterston/CTN2w)  \r\n[listSort](http://jsfiddle.net/davidwaterston/ff2zy)  \r\n[listUnion](http://jsfiddle.net/davidwaterston/gUGGw/)  \r\n[listValueCount](http://jsfiddle.net/davidwaterston/WPyED)  \r\n[listValueCountNoCase](http://jsfiddle.net/davidwaterston/4gVnX)  \r\n\r\n#Version History\r\n\r\n| Version | Release Date | Details |   \r\n| :-- | :-- | :-- |    \r\n| 1.6.0 | 10th June, 2013 | Added eight new functions - *[listConcatenate](#listConcatenate)*, *[listDifference](#listDifference)*, *[listIntersection](#listIntersection)*, *[listRemove](#listRemove)*, *[listRemoveNoCase](#listRemoveNoCase)*, *[listReplace](#listReplace)*, *[listReplaceNoCase](#listReplaceNoCase)* and *[listUnion](#listUnion)*. |\r\n| 1.5.0 | 10th September, 2012 | Added two new functions - *[listContains](#listContains)* and *[listContainsNoCase](#listContainsNoCase)*. |\r\n| 1.4.1 | 8th September, 2012 | Bug fix to *[listFind](#listFind)* (and indirectly *[listFindNoCase](#listFindNoCase)* to resolve a problem with older (pre-9) versions of Internet Explorer. |\r\n| 1.4.0 | 3rd September, 2012 | Added extra parameter checking to each function, replaced 'typeof undefined' checks with '=== undefined' to ensure compatibility with jsLint Edition 2012-08-23. Added the *Jasmine* test suite with 250 tests. |\r\n| 1.3.0 | 16th June, 2012 | Added three new functions - *[listChangeDelims](#listChangeDelims)*, *[listValueCount](#listValueCount)* and *[listValueCountNoCase](#listValueCountNoCase)*. |\r\n| 1.2.0 | 21st May, 2012 | Minor changes to *[listRemoveDuplicates](#listRemoveDuplicates)* and *[listRemoveDuplicatesNoCase](#listRemoveDuplicatesNoCase)* to improve performance with larger lists (100,000+ elements). |\r\n| 1.1.0 | 18th May, 2012 | Added two new functions - *[listRemoveDuplicates](#listRemoveDuplicates)* and *[listRemoveDuplicatesNoCase](#listRemoveDuplicatesNoCase)*.|\r\n| &nbsp; | &nbsp; | Updated sample code and documentation. |  \r\n| &nbsp; | &nbsp; | Added this version history. |     \r\n| 1.0.0 | 15th May, 2012 | Initial release. |  \r\n\r\n#Future Plans\r\n\r\nCurrent and planned work for jList is public and detailed in [Trello](https://trello.com/board/jlist/504b80ff3a6c80626f306215).","google":"UA-34525149-1","note":"Don't delete this file! It's used internally to help with page regeneration."}